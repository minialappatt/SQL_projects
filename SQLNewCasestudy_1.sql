select * from Fact
select * from Product
select * from Location

1) Display number of states present in location table?

select count(distinct state) as state_count
from Location

--2) How many products are of regular type ?
select count(distinct Product) product_count from Product
	where Type='regular'


--3) How much spending has been done on marketing of product id 1
select sum(Marketing) as Marketing_expenditure from Fact 
		where ProductId=1


--4) What is the minimum sales of a product ?select min(Sales) as Sales_min  from Fact--5) Display max Cost of Good Sold(COGS).select max(COGS) as COGS_max  from Fact--6) Display the Details of the productid where product type is coffeeselect ProductId from Product where Product_Type='coffee'--7) Display the details where total_expenses is greater than 40.select * from Fact where Total_Expenses>40--8) What is the average sales in Area_Code 719 ?select avg(Sales) Avg_Sales from Fact where Area_Code=719--9) Find out the total profit generated by Colorado state.--using join   --mostly used when we need to display columns from both the tablesselect sum(Profit) Sum_of_profit    from Fact Finner join Location Lon f.Area_Code=l.Area_Codewhere State='colorado'--using subquery  ---this is more optimized,because we need to display column from one table onlyselect sum(profit) as Sum_of_profit from Fact		where Area_Code in 					(select Area_Code from Location where State='colorado')--10) Display the average inventory for each product idselect ProductId, avg(Inventory) Avg_of_Inventory from Fact								group by ProductIdselect ProductId, avg(Inventory) Avg_of_Inventory from Fact								group by ProductId order by ProductId--11) Display state in a sequential order in a location table.select distinct state from Location 					order by State--12) Display the average budget margin of the store where average budget margin should begreater than 100.select Area_Code, avg(Budget_Margin) as Avg_Budget_Margin from Fact 							group by Area_Code							having avg(Budget_Margin)>100							order by Avg_Budget_Margin								--13) What is the total sales done on date 2010-01-01select sum(Sales) Total_Sales from fact where Date='2010-01-01'--14) Display the average total expense of each product id on individual dateselect productid,date,avg(Total_Expenses) Avg_total_exp from fact					group by ProductId,Date					order by ProductId--15) Display the table with the following attributes such as Date, productid, product_type, product, Sales, profit, state, area_codeselect F.Date,F.ProductId,P.Product_Type,P.Product,F.Sales,F.Profit,L.State,L.Area_Code		from Fact F			inner join Location L			on F.Area_Code=L.Area_Code			inner join Product P			on F.ProductId=P.ProductId--16) Display the rank without any gap to show the Sales wise rank.select *,DENSE_RANK() over (order by sales desc) Rank from fact--17) Find the State wise Profit and Salesselect L.State,sum(F.Profit) Total_Profit_statewise , sum(F.Sales) Total_Sales_statewise	from Fact F	inner join Location L	on F.Area_Code=L.Area_Code	group by L.State--18) Find the State wise Profit and Sales along with the Product Name.select P.Product,L.State,sum(F.Profit) Total_Profit_statewise , sum(F.Sales) Total_Sales_statewise	from Fact F	inner join Location L	on F.Area_Code=L.Area_Code	inner join Product P	on F.ProductId=P.ProductId	group by L.State,P.Product--19) If there is an increase in sales of 5%. Calculate the increased sales.select Sales, (Sales+(sales*0.05)) from Factselect Sales, (sales*1.05) from Fact--20) Find the maximum profit along with the Product id and Product Typeselect F.ProductId,P.Product_Type,max(F.Profit) Max_Profit	from Fact F	inner join Product P	on F.ProductId=P.ProductId	group by F.ProductId,P.Product_Type--21) Create a Stored Procedure to fetch the result according to the product type from Productcreate procedure ProcProduct @Prod_type varchar(25)asselect * from Product				where Product_Type=@Prod_typeexec ProcProduct @Prod_type='coffee'--22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.select *,IIF(Total_Expenses<60 ,'Profit','Loss') Result	from Fact--23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the data in hierarchical orderselect date,ProductId,sum(Sales) Sales		from Fact		group by rollup(date,ProductId)--24) Apply union and intersection operator on the tables which consist of attribute area code.select Area_Code from Factunionselect Area_Code from Locationselect Area_Code from Factintersectselect Area_Code from Location--25) Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.create function GetProductType(@prod_type varchar(25))	returns table	as	return		(select * from Product where Product_Type=@prod_type)select * from [dbo].[GetProductType]('tea')--26) Change the product type from coffee to tea where product id is 1 and undo it.begin transaction              --when we give 'begin transaction' before update, we can undo that change by writing 'rollback transaction'update Product	set Product_Type='tea'	where ProductId=1select * from Productrollback transaction--27) Display the Date, productid and sales where total expenses are between 100 to 200.select Date,ProductId,Sales,Total_Expenses 			from Fact			where Total_Expenses between 100 and 200--28) Delete the records in the product table for regular type.begin transaction ABC                                  --naming transactiondelete from Product where Type='regular'rollback transaction ABC--29) Display the ASCII value of the fifth character from the column productselect ASCII(SUBSTRING(Product,5,1)) Ascii_Value,Product from Product